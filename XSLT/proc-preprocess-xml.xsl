<?xml version="1.0" encoding="utf-8"?>
<!--

  BookML: bookdown flavoured GitBook port for LaTeXML
  Copyright (C) 2021-25 Vincenzo Mantova <v.l.mantova@leeds.ac.uk>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.

-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:ltx="http://dlmf.nist.gov/LaTeXML"
  xmlns:b="https://vlmantova.github.io/bookml/functions"
  xmlns:str="http://exslt.org/strings"
  extension-element-prefixes="str">

  <xsl:import href="utils.xsl" />

  <xsl:output
    method="xml"
    encoding="utf-8" />

  <xsl:param name="AUX_DIR" />

  <!-- make a copy of the XML file with selected alterations -->
  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
  </xsl:template>

  <xsl:template match="/">
    <xsl:processing-instruction name="latexml">
      <xsl:text>searchpaths="</xsl:text>
      <xsl:value-of select="$AUX_DIR" />
      <xsl:text>/images"</xsl:text>
    </xsl:processing-instruction>
    <xsl:apply-templates />
  </xsl:template>

  <!-- replace references to PDF, EPS images to SVG (possibly generated by make) -->
  <xsl:template match="ltx:graphics/@candidates">
    <!-- WARNING: this code must be kept in sync with proc-resources.xsl -->
    <xsl:variable name="candidates" select="str:split(str:replace(.,'\','/'),',')" />

    <!-- find page number, if specified -->
    <xsl:variable name="escaped-options" select="str:replace(../@options,'\,','-NOTCOMMA-')" />
    <xsl:variable name="page">
      <!-- TODO: select *last* occurrence of page option -->
      <xsl:variable name="page-option" select="str:split($escaped-options,',')/text()[starts-with(.,'page=')]" />
      <xsl:value-of select="substring-after($page-option,'page=')" />
    </xsl:variable>

    <!-- find if we have a scalable candidate (SVG, PDF, EPS) -->
    <xsl:variable name="scalable">
      <xsl:choose>
        <xsl:when test="$candidates//text()[contains(b:lower-case(.),'.svg') or contains(b:lower-case(.),'.pdf') or contains(b:lower-case(.),'.eps')]">
          <xsl:value-of select="$candidates//text()[contains(b:lower-case(.),'.svg') or contains(b:lower-case(.),'.pdf') or contains(b:lower-case(.),'.eps')]" />
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="ext" select="b:lower-case(substring($scalable,string-length($scalable)-2))" />

    <!-- if $scalable is not below the current folder, we remove the folder, as latexmlpost would do -->
    <xsl:variable name="scalable-without-parent">
      <xsl:choose>
        <!-- Win32: also check if path starts with drive letter -->
        <xsl:when test="substring($scalable,2,1)=':' or starts-with($scalable,'/') or starts-with($scalable,'../')">
          <xsl:value-of select="str:split($scalable,'/')[last()]//text()" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$scalable" />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="converted">
      <xsl:choose>
        <!-- if the image is already an SVG, no need for conversion -->
        <xsl:when test="$ext = 'svg'"><xsl:value-of select="$scalable" /></xsl:when>
        <!-- otherwise, we ask make to create an SVG -->
        <xsl:otherwise>
          <xsl:text>bmlimages/svg/</xsl:text>
          <xsl:choose>
            <xsl:when test="$page != ''">
              <xsl:value-of select="$scalable-without-parent" />
              <xsl:text>/p</xsl:text>
              <xsl:value-of select="$page" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="substring($scalable-without-parent,1,string-length($scalable-without-parent)-4)" />
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>.svg</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:attribute name="candidates">
      <xsl:choose>
        <xsl:when test="$converted != ''">
          <xsl:value-of select="$converted" />
        </xsl:when>
        <!-- only raster images (PNG, JPG, ...), leave untouched -->
        <xsl:otherwise>
          <xsl:value-of select="." />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>
  </xsl:template>

</xsl:stylesheet>
