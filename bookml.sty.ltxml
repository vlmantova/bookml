# -*- mode: Perl -*-
# vim: syntax=perl

=begin comment

  BookML: bookdown flavoured GitBook port for LaTeXML
  Copyright (C) 2021  Vincenzo Mantova <v.l.mantova@leeds.ac.uk>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.

=end comment

=cut

package LaTeXML::Package::Pool;
use strict;
use warnings;

use LaTeXML::Package;
use LaTeXML::Util::Pathname;

use File::Find;
use File::Spec;
use File::Which;
use IPC::Open3;
use XML::LibXML;
use DB_File;

my ($bml_ProgressSpinup, $bml_ProgressSpindown, $bml_ProgressStep, $bml_Note, $bml_NoteLog, $bml_NoteSTDERR);

if (!defined &ProgressSpinup) {
  # pre-0.8.6 reporting
  $bml_ProgressSpinup   = \&NoteBegin;
  $bml_ProgressSpindown = \&NoteEnd;
  $bml_ProgressStep     = sub { my $text = shift; if (defined $text) { \&NoteProgress("\n$text"); } };
  $bml_Note             = sub { my $text = shift; if (defined $text) { \&NoteProgress("\n$text"); } };
  $bml_NoteLog = sub { my $text = shift; if (defined $text) { \&NoteProgressDetailed("\n$text"); } };
  $bml_NoteSTDERR = sub { };
} else {
  $bml_ProgressSpinup   = \&ProgressSpinup;
  $bml_ProgressSpindown = \&ProgressSpindown;
  $bml_ProgressStep     = \&ProgressStep;
  $bml_Note             = \&Note;
  $bml_NoteLog          = \&NoteLog;
  $bml_NoteSTDERR       = \&NoteSTDERR;
}

# Helper function to add resources at the *end* of head or body
# Partly copied from RequireResource
my $bml_resource_options = {
  type => 1, location => 1, content => 1 };
my $bml_resource_types = {
  css  => 'text/css',
  js   => 'text/javascript',
  ttf  => 'font/ttf',
  pdf  => 'application/pdf',
  epub => 'application/epub+zip'
};

sub BMLRequireResource {
  my ($resource, %options) = @_;
  CheckOptions('BMLRequireResource', $bml_resource_options, %options);

  if (!$options{content} && !$resource) {
    Warn('expected', 'resource', undef, 'Resource must have a resource pathname or content; skipping');
    return; }

  if (!$options{location}) {
    $options{location} = 'head'; }

  if (!$options{type}) {
    my $ext = $resource && pathname_type($resource);
    $options{type} = $ext && $$bml_resource_types{$ext}; }
  if (!$options{type}) {
    Warn('expected', 'type', undef, 'Resource must have a mime-type; skipping');
    return; }
  $options{type} .= ';bmllocation=' . $options{location};

  delete $options{location};
  return RequireResource($resource, %options);
}

my $bml_style      = 'gitbook';
my $bml_imagescale = 96 / 72;
my $bml_fontscale  = 1;
my $bml_jobname    = ToString(Expand(T_CS('\jobname')));
my @bml_download   = ();

for my $ext ('pdf', 'epub') {
  if (-f "$bml_jobname.$ext") {
    Info('found', $ext, undef, "bundling '$bml_jobname.$ext' in the output");
    push(@bml_download, "$bml_jobname.$ext"); }
}

DeclareOption('style=plain',   sub { $bml_style = 'plain';   return; });
DeclareOption('style=gitbook', sub { $bml_style = 'gitbook'; return; });
DeclareOption('style=none',    sub { $bml_style = 'none';    return; });
DeclareOption('mathjax=2');
DeclareOption('nomathjax');
for my $pt (5 .. 28) {
  DeclareOption($pt . 'pt', sub {
      $bml_fontscale  = 10 / $pt;
      $bml_imagescale = 96 / 72 * $bml_fontscale;
      return;
  });
}

DeclareOption(undef, sub {
    my ($stomach) = @_;
    my $opt = ToString(Expand(T_CS('\CurrentOption')));
    if ($opt =~ m/^imagescale\s*=\s*(.*)$/) {
      my $val = $1;
      if ($val =~ m/^(?:\d+|\d*\.\d+)$/) {
        $bml_imagescale = $bml_fontscale * $val; }
      else {
        Error('malformed', $opt, $stomach, "Value '$val' of imagescale= for bookml.sty must be a decimal number"); } }
    else {
      Error('unexpected', $opt, $stomach, "Unexpected option '$opt' passed to bookml.sty"); }
    return;
});

ProcessOptions();

RequirePackage('latexml', options => ['nocomments', 'noguesstabularheaders']);

if ($bml_style eq 'gitbook') {
  # anywhere in the head
  for my $res (qw(
    bookml/gitbook/css/style.css
    bookml/gitbook/css/plugin-table.css
    bookml/gitbook/css/plugin-bookdown.css
    bookml/gitbook/css/plugin-fontsettings.css
    )
  ) { RequireResource($res); }

  # end of body
  for my $res (qw(
    bookml/gitbook/js/app.min.js
    bookml/gitbook/js/plugin-fontsettings.js
    bookml/gitbook/js/plugin-bookdown.js
  )) { BMLRequireResource($res, location => 'body'); }

  # additional files to be copied over
  RequireResource('bookml/gitbook/css/fontawesome/fontawesome-webfont.ttf', type => 'font/ttf');
  for my $file (@bml_download) {
    BMLRequireResource($file, location => 'download');
  }
}

# CSS files
AtBeginDocument(sub {
    File::Find::find({
        preprocess => sub { sort @_; },
        no_chdir   => 1,
        wanted     => sub {
          if (-f $_ && m/\.css$/i) {
            my $styles = ',_all,';
            if ($_ =~ /\.([^.]+)\.css$/i) {
              $styles = ",$1,"; }
            if ($styles =~ /,(?:_all|$bml_style),/) {
              RequireResource($_); } }
        }
      },
      'bookml/CSS', (-d 'bmluser') ? 'bmluser' : ());
    return;
});

# HTML-in-LaTeX mechanism
AtBeginDocument(sub { RelaxNGSchema('bookml/schema'); });

# switch to T1 encoding for proper parsing of <, >
sub BMLStartHTMLFontEncoding {
  my ($stomach) = @_;
  $stomach->bgroup;
  if (LoadFontMap('T1')) {
    MergeFont(encoding => 'T1'); }
  else {
    Warning('bookml', 'html', $stomach, 'Can\'t load T1 encoding, raw HTML likely to be garbled'); }
  return; }

sub BMLEndHTMLFontEncoding {
  $_[0]->egroup;
  return; }

sub BMLHTMLEnvironment {
  my ($name, %opts) = @_;

  DefEnvironment("{h:$name} OptionalKeyVals", sub {
      my ($document, $kv, %properties) = @_;
      my $body = $properties{body};
      $kv = $kv && $kv->getKeyVals;

      my $node = $document->openElement('ltx:xmlelem',
        ns   => 'http://www.w3.org/1999/xhtml',
        name => $name, innercontext => $opts{innercontext});
      for my $attr (keys %$kv) {
        $document->insertElement('ltx:xmlattr', undef, name => $attr,
          value => ToString($$kv{$attr})); }

      $document->absorb($body);    # emit content of the environment

      $document->closeElement('ltx:xmlelem');
    },
    beforeDigest     => \&BMLStartHTMLFontEncoding,
    afterDigestBegin => \&BMLEndHTMLFontEncoding
  );

  return;
}

DefPrimitive('\bmlHTMLEnvironment{}', sub {
    my ($gullet, $names) = @_;
    my @names = split(/,/, ToString(Expand($names)));
    for my $name (@names) {
      BMLHTMLEnvironment($name); }
    return;
});

DefPrimitive('\bmlHTMLInlineEnvironment{}', sub {
    my ($gullet, $names) = @_;
    my @names = split(/,/, ToString(Expand($names)));
    for my $name (@names) {
      BMLHTMLEnvironment($name, innercontext => 'inline'); }
    return;
});

# Raw HTML mechanism

my $parser = XML::LibXML->new();

DefConstructor('\bmlRawHTML Digested', sub {
    my ($document, $arg) = @_;

    # wrap in <span> to set the XHTML namespace
    my $html = $parser->parse_balanced_chunk('<span xmlns="http://www.w3.org/1999/xhtml">'
        . ToString($arg) . '</span>');
    my @elems = $html->firstChild->findnodes('*');

    my $node = $document->openElement('ltx:rawhtml');
    map { $document->appendClone($node, $_) } @elems;
    $document->closeElement('ltx:rawhtml');
  },
  beforeDigest => \&BMLStartHTMLFontEncoding,
  afterDigest  => \&BMLEndHTMLFontEncoding
);

# Image generation via LaTeX
NewCounter('bml@imagecounter');
DefMacro('\bml@includeimage', '\stepcounter{bml@imagecounter}\includegraphics{bmlimages/\jobname-\thebml@imagecounter.svg}\bml@add@depth{\thebml@imagecounter}');
DefConstructor('\bml@add@depth{}', \&BMLAddDepth);

my $bml_depth;
my $jobname = ToString(Expand(T_CS('\jobname')));
my $source  = LookupValue('SOURCEFILE');
my $outdir  = pathname_concat('bmlimages', $bml_jobname);
my $dvifile = pathname_concat($outdir,     $jobname . '.dvi');
my $svgfmt  = pathname_concat('bmlimages', '%f-%0p.svg');
my $dpth    = pathname_concat($outdir,     $jobname . '.dpth');

sub BMLAddDepth {
  my ($document, $counter) = @_;
  $counter = ToString($counter);
  BMLGenerateImages($document);
  my $node = $document->getLastChildElement($document->getElement);
  return Error('expected', 'dpth', $document,
    'could not find depth for BookML image ' . $node->getAttribute('graphic')
      . "; see $bml_jobname.latexml.log for more details, and try deleting $dpth")
    unless defined $bml_depth && exists $$bml_depth{$counter};
  $document->setAttribute($node, 'imagedepth', int(0.5 + $$bml_depth{$counter} * $bml_imagescale * 96 / 72));
  return;
}

sub BMLGenerateImages {
  my ($gullet) = @_;

  # skip if we have already generated the images
  return if defined $bml_depth;
  $bml_depth = {};

  return Error('expected', 'latexmk', undef, 'No latexmk command found; BookML images will be missing.',
    'Please install latexmk to let BookML generate images from LaTeX')
    unless which 'latexmk';
  return Error('expected', 'dvisvgm', undef, 'No dvisvgm command found; BookML images will be missing.',
    'Please install dvisvgm to let BookML generate images from LaTeX')
    unless which 'dvisvgm';
  return Error('expected', 'preview.sty', undef, 'Package preview.sty not found; BookML images will be missing.',
    'Please install preview.sty to let BookML generate images from LaTeX')
    unless pathname_kpsewhich('preview.sty');

  &$bml_ProgressSpinup('BookML images');

  # code to activate bmlimages and add dvisvgm,hypertex as global options
  # hypertex ensures hyperref does not emit PDF specials which confuse dvisvgm
  my $preclass = '\PassOptionsToPackage{_bmlimages}{bookml/bookml}';       # activate bmlimages
  $preclass .= '\makeatletter';
  $preclass .= '\let\bml@dcl@ss\documentclass';                            # save \documentclass
  $preclass .= '\renewcommand{\documentclass}[1][]{';                      # renew \documentclass[]
  $preclass .= '\def\bml@dcl@ss@pts{#1}';                                  # save options
  $preclass .= '\let\documentclass\bml@dcl@ss';                            # restore \documentclass
  $preclass .= '\ifx\bml@dcl@ss@pts\@empty';                               # no options?
  $preclass .= '\def\bml@dcl@ss@{\documentclass[dvisvgm,hypertex]}';       # add dvisvgm,hypertex
  $preclass .= '\else';                                                    # with options?
  $preclass .= '\def\bml@dcl@ss@{\documentclass[dvisvgm,hypertex,#1]}';    # prepend dvisvgm,hypertex
  $preclass .= '\fi\bml@dcl@ss@}';                                         # close definition
  $preclass .= '\makeatother';

  # compile $source to DVI with latexmk
  my @lmk_invocation = ('latexmk', '-output-format=dvi',
    '-interaction=nonstopmode',     '-halt-on-error',
    '-output-directory=' . $outdir, '-usepretex=' . $preclass,
    '-jobname=' . $jobname,         $source);
  if ($^O =~ /^(MSWin|cygwin)/) {
    require Win32::ShellQuote;
    @lmk_invocation = Win32::ShellQuote::quote_system_list->(@lmk_invocation); }
  &$bml_NoteLog('Calling ' . join(' ', @lmk_invocation));
  &$bml_NoteLog('Logs in ' . pathname_concat($outdir, $jobname . '.log'));
  my $lmk_pid = IPC::Open3::open3(undef, my $lmk_stdout, undef,
    @lmk_invocation);

  my $rebuild    = 1;
  my $print_next = 0;

  # report progress and remember if latexmk did anything
  while (<$lmk_stdout>) {
    if (!$rebuild || m/^Latexmk: Nothing to do for/) {
      $rebuild = 0; }
    if (m/^Latexmk: Run number (.*)/) {
      &$bml_ProgressStep("latexmk: run number $1"); }
    else {
      chomp;
      $_ = ' ' . $_;
      # copied from texfot.pl v1.47 by Karl Berry (public domain)
      if ($print_next) {
        &$bml_NoteSTDERR($_);
        $print_next = 0; }
      # lines that can be ignored
      elsif (/^\ (
        LaTeX\ Warning:\ You\ have\ requested\ package
        |LaTeX\ Font\ Warning:\ Some\ font\ shapes
        |LaTeX\ Font\ Warning:\ Size\ substitutions
        |Package\ auxhook\ Warning:\ Cannot\ patch
        |Package\ biditools\ Warning:\ Patching
        |Package\ caption\ Warning:\ Un(supported|known)\ document\ class
        |Package\ fixltx2e\ Warning:\ fixltx2e\ is\ not\ required
        |Package\ frenchb?\.ldf\ Warning:\ (Figures|The\ definition)
        |Package\ layouts\ Warning:\ Layout\ scale
        |\*\*\*\ Reloading\ Xunicode\ for\ encoding  # spurious ***
        |This\ is\ `?(epsf\.tex|.*\.sty|TAP) # so what
        |pdfTeX\ warning:.*inclusion:\ fou   #nd PDF version ...
        |pdfTeX\ warning:.*inclusion:\ mul   #tiple pdfs with page group
        |libpng\ warning:\ iCCP:\ Not\ recognizing
        |!\ $
        )/x) {
        &$bml_ProgressStep(); }
      # error messages followed by an additional line
      elsif (/^\ (
        .*?:[0-9]+:         # usual file:lineno: form
        |!                  # usual ! form
        |>\ [^<]            # from \show..., but not "> <img.whatever"
        |.*pdfTeX\ warning  # pdftex complaints often cross lines
        |LaTeX\ Font\ Warning:\ Font\ shape
        |Package\ hyperref\ Warning:\ Token\ not\ allowed
        |removed\ on\ input\ line  # hyperref
        |Runaway\ argument
        )/x) {
        $print_next = 1;
        &$bml_NoteSTDERR($_); }
      # remaining errors and diagnostic messages
      elsif (/^\ (
        This\ is
        |Output\ written
        |No\ pages\ of\ output
        |\(.*end\ occurred\ inside\ a\ group
        # |(Und|Ov)erfull                           # bookml does not care about und|overfulls
        |(LaTeX|Package|Class).*(Error) # |Warning) # bookml can ignore warnings
        |.*Citation.*undefined                      # bookml can ignore warnings
        |.*\ Error           # as in \Url Error ->...
        |Missing\ character: # good to show (need \tracinglostchars=1)
        |\\endL.*problem     # XeTeX?
        |\*\*\*\s            # *** from some packages or subprograms
        |l\.[0-9]+\          # line number marking
        |all\ text\ was\ ignored\ after\ line
        |.*Fatal\ error
        |.*for\ symbol.*on\ input\ line
        |\#\#
        )/x) {
        &$bml_NoteSTDERR($_); }
      &$bml_ProgressStep();
      &$bml_NoteLog($_); }
  }

  close($lmk_stdout);
  waitpid($lmk_pid, 0);
  if ($! || $?) {
    &$bml_ProgressSpindown('BookML images');
    return Error('bookml', 'latexmk', undef, "problem while running latexmk, some images will be missing; see $outdir/$jobname.log for more details",
      $! ? "Error closing pipe: $!" : 'Exit status ' . ($? >> 8),
      'Invocation:', @lmk_invocation); }

  if (!$rebuild) {
    # open the depth cache
    if (tie my %bml_depth_db, 'DB_File', $dpth, O_RDONLY) {
      # restore the saved depth
      while (my ($k, $v) = each(%bml_depth_db)) {
        $$bml_depth{$k} = $v; }
      untie %bml_depth_db; }
    else {
      # delete the depth cache
      Info('I/O', 'dpth', undef, "Couldn't open the depth cache ($dpth) for $jobname.tex, message was '$!'; SVGs and depth cache will be recreated");
      $rebuild = 1; } }

  # if the DVI has changed, or the depth cache is invalid, rebuild the images
  if ($rebuild) {
    # convert DVI to images
    my @dsvg_invocation = ('dvisvgm', '--page=1-', '--bbox=preview',
      '--no-fonts', '--exact', '--zoom=' . $bml_imagescale,
      ('--optimize') x (version->parse(split(' ', `dvisvgm --version`)) >= v1.6),
      '--output=' . $svgfmt, $dvifile);
    if ($^O =~ /^(MSWin|cygwin)/) {
      require Win32::ShellQuote;
      @dsvg_invocation = Win32::ShellQuote::quote_system_list->(@dsvg_invocation); }
    &$bml_NoteLog('Calling ' . join(' ', @dsvg_invocation));
    my $dsvg_pid = IPC::Open3::open3(undef, my $dsvg_stdout, undef,
      @dsvg_invocation);

    # report progress
    my $counter;
    while (<$dsvg_stdout>) {
      if (m/^processing page (\d+)/) {
        $counter = $1;
        &$bml_ProgressStep("dvisvgm: processing image $counter"); }
      elsif (m/, depth=(\d*(?:\.\d+)?)pt/) {
        $$bml_depth{$counter} = $1; }
      else { &$bml_ProgressStep(); }
      chomp $_;
      &$bml_NoteLog($_);
    }

    close($dsvg_stdout);
    waitpid($dsvg_pid, 0);
    if ($! || $?) {
      &$bml_ProgressSpindown('BookML images');
      return Error('bookml', 'dvisvgm', undef, "problem while running dvisvgm, some images will be missing or misaligned; see $jobname.latexml.log for more details",
        $! ? "Error closing pipe: $!" : 'Exit status ' . ($? >> 8),
        'Invocation:', @dsvg_invocation); }

    # create the depth cache
    unlink $dpth if -f $dpth;
    if (tie my %bml_depth_db, 'DB_File', $dpth, O_RDWR | O_CREAT) {
      # save the depth
      while (my ($k, $v) = each(%$bml_depth)) {
        $bml_depth_db{$k} = $v; }
      untie %bml_depth_db; }
    else {
      # delete the depth cache
      Error('I/O', 'dpth', undef, "Couldn't create the depth cache ($dpth) for $jobname.tex, message was '$!'; deleting $dpth");
      unlink $dpth if -f $dpth; } }

  &$bml_ProgressSpindown('BookML images');

  return;
}

sub BMLImageEnvironment {
  my ($gullet, $names) = @_;
  my @names = split(/,/, ToString($names));
  for my $name (@names) {
    AtBeginDocument(sub {
        RequirePackage('graphicx');
        DefMacroI(T_CS("\\begin{$name}"), undef, sub {
            my ($ingullet) = @_;
            while ($ingullet->readUntil(T_CS('\end'))) {
              my $arg = $ingullet->readArg;
              last if (ToString($arg) eq $name);
            }
            return T_CS('\bml@includeimage');
        });
    });
  }
  return;    # or perltidy complains
}

DefPrimitive('\bmlImageEnvironment{}', \&BMLImageEnvironment);

BMLImageEnvironment(undef, 'preview');    # predefined by the preview package
BMLImageEnvironment(undef, 'bmlimage');

# Alternative text
DefConstructor('\bmlDescription Semiverbatim', sub {
    my ($document, $text) = @_;
    my $node = $document->getLastChildElement($document->getElement);
    $document->setAttribute($node, 'description', ToString($text));
});

# Add class to previous node
DefConstructor('\bmlPlusClass Semiverbatim', sub {
    my ($document, $class) = @_;
    my $node = $document->getLastChildElement($document->getElement);
    $document->addClass($node, ToString($class));
});

# Disable MathJax locally
DefConstructor('\bmlDisableMathJax', sub {
    my ($document) = @_;
    my $node       = $document->getElement;
    my @eqnodes    = $document->findnode('ancestor-or-self::ltx:equation[1]//ltx:Math', $node);
    if (!@eqnodes) {
      @eqnodes = ($node); }
    for my $eqnode (@eqnodes) {
      $document->addClass($eqnode, 'bml_disable_mathjax'); }
}, reversion => '');

1;
